/* Copyright (c) 2018 Francis James Franklin
 * 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and
 *    the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *    the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*! \file ip_defines.hh
    \brief Additional defines, mostly related to header lengths and TCP/IP connection states.
    
    Configuration options are set in ip_config.hh. This file should not need to be adjusted, with the possible
    exception of DEBUG_PRINT.
*/

#ifndef __ip_defines_hh__
#define __ip_defines_hh__

#include "ip_config.hh"

#if IP_DEBUG
#define DEBUG_PRINT(x) IP_Manager::manager().debug_print (x) ///< If IP_DEBUG is set, this routes internal debug statements to IP_Manager::debug_print().
#else
#define DEBUG_PRINT(x) while (false)                         ///< If IP_DEBUG is set, this routes internal debug statements to IP_Manager::debug_print().
#endif

/* Header sizes
 */
#define IP_Header_Length_IPv6 40 ///< Length of the IPv6 header
#define IP_Header_Length_IPv4 20 ///< Length of the IPv4 header
#define IP_Header_Length_UDP   8 ///< Length of the UDP header
#define IP_Header_Length_TCP  20 ///< Length of the TCP header

/* Different header types for IPv4 & IPv6
 */
#if IP_USE_IPv6
#define IP_Address_WordCount   8                     ///< Number of two-byte words in an IP address (8 for IPv6; 2 for IPv4)
#define IP_Header_Length_IP    IP_Header_Length_IPv6 ///< Length of the IP header
#else
#define IP_Address_WordCount   2                     ///< Number of two-byte words in an IP address (8 for IPv6; 2 for IPv4)
#define IP_Header_Length_IP    IP_Header_Length_IPv4 ///< Length of the IP header
#endif

/* TCP (or UDP) is framed within IP...
 */
#define IP_Header_UDP_IP       (IP_Header_Length_IP + IP_Header_Length_UDP) ///< Length of the IP + UDP headers (48 for IPv6; 28 for IPv4)
#define IP_Header_TCP_IP       (IP_Header_Length_IP + IP_Header_Length_TCP) ///< Length of the IP + TCP headers (60 for IPv6; 40 for IPv4)

/* Maximum data length for TCP/IP connections
 */
#define IP_TCP_MaxDataSize     (IP_Buffer_WordCount * 2 - IP_Header_TCP_IP) ///< Space available for data in TCP/IP packets generated by NetIP

/* Connection flags
 */
#define IP_Connection_Open             0x8000 ///< The connection is open.
#define IP_Connection_Busy             0x4000 ///< The connection is active, even if not open.
#define IP_Connection_Protocol_TCP     0x2000 ///< The connection is operating in TCP mode.
#define IP_Connection_RemoteSpecified  0x1000 ///< A remote address and port have been specified.
#define IP_Connection_TimeoutSet       0x0800 ///< The timer has been set and a timeout is expected.

#define IP_TCP_Mask                    0x01FF ///< Bit mask of flags corresponding to the TCP connection state.
#define IP_TCP_Server                  0x0100 ///< The connection is operating in server mode.
#define IP_TCP_SendSyn                 0x0080 ///< Asynchronous flag, requesting that a SYN should be sent when possible.
#define IP_TCP_SendSynAck              0x0040 ///< Asynchronous flag, requesting that a SYN-ACK should be sent when possible.
#define IP_TCP_SendAck                 0x0020 ///< Asynchronous flag, requesting that an ACK should be sent when possible.
#define IP_TCP_SynSent                 0x0010 ///< Flag noting that a SYN has been sent.
#define IP_TCP_SynAckSent              0x0008 ///< Flag noting that a SYN-ACK has been sent.

#endif /* ! __ip_defines_hh__ */
