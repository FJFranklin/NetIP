/* Copyright (c) 2018 Francis James Franklin
 * 
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided
 * that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and
 *    the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *    the following disclaimer in the documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
 * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*! \file ip_buffer.hh
    \brief The actual packet buffer, along with utility methods for analysing or creating the protocol and IP headers.
    
    The packet buffer must be associated with an originating channel; if it's being generated, then the channel number is zero.
    Either IPv4 or IPv6 is supported, but not both simultaneously.
*/

#ifndef __ip_buffer_hh__
#define __ip_buffer_hh__

#include "ip_protocol.hh"

/** The IP_Buffer contains the actual byte buffer for packets, as well as a range of utility methods for examining
 * and/or generating the protocols and and data. The packet buffer must be associated with an originating channel;
 * if it's being generated, then the channel number is zero. Either IPv4 or IPv6 is supported, but not both simultaneously.
 */
class IP_Buffer : public Buffer, public Link {
private:
  u8_t buffer[IP_Buffer_WordCount << 1]; ///< The main packet buffer, containing IP and UDP/TCP/ICMP headers, as well as any data.
  u8_t source_channel;                   ///< Number (1-15) indicating the source (i.e., which IP_Channel) of the packet; or 0 for self.
  u8_t ref_count;                        ///< A reference counter.

public:
  /** Set the number of the originating channel; 0 for packets generated by us, 1-15 for other channels (identified by IP_Channel).
   */
  inline void channel (u8_t channel_number) {
    source_channel = channel_number;
  }

  /** Get the number of the originating channel.
   */
  inline u8_t channel () const {
    return source_channel;
  }

  /** Increment the reference counter.
   */
  inline void ref () {
    ++ref_count;
  }

  /** Decrement the reference counter.
   */
  inline u8_t unref () {
    return --ref_count;
  }

  /** Returns true if the reference counter is non-zero.
   */
  inline bool retained () const {
    return (ref_count > 0);
  }

  /** Default constructor.
   */
  IP_Buffer () :
    Buffer(buffer, IP_Buffer_WordCount << 1),
    source_channel(0),
    ref_count(0)
  {
    // ...
  }

  ~IP_Buffer () {
    // ...
  }

#if IP_USE_IPv6
  /** Returns a reference to the IP header within the buffer. For IPv6, see struct IP_Header_IPv6. For IPv4, see struct IP_Header_IPv4.
   */
  inline struct IP_Header_IPv6 & ip () {
    return *((struct IP_Header_IPv6 *) buffer);
  }

  /** Returns a constant reference to the IP header within the buffer. For IPv6, see struct IP_Header_IPv6. For IPv4, see struct IP_Header_IPv4.
   */
  inline const struct IP_Header_IPv6 & ip () const {
    return *((const struct IP_Header_IPv6 *) buffer);
  }
#else // IP_USE_IPv6
  /** Returns a reference to the IP header within the buffer. For IPv6, see struct IP_Header_IPv6. For IPv4, see struct IP_Header_IPv4.
   */
  inline struct IP_Header_IPv4 & ip () {
    return *((struct IP_Header_IPv4 *) buffer);
  }

  /** Returns a constant reference to the IP header within the buffer. For IPv6, see struct IP_Header_IPv6. For IPv4, see struct IP_Header_IPv4.
   */
  inline const struct IP_Header_IPv4 & ip () const {
    return *((const struct IP_Header_IPv4 *) buffer);
  }
#endif

  /** Returns a reference to the TCP header within the buffer.
   */
  inline struct IP_Header_TCP & tcp () {
    return *((struct IP_Header_TCP *) (buffer + ip().header_length ()));
  }

  /** Returns a constant reference to the TCP header within the buffer.
   */
  inline const struct IP_Header_TCP & tcp () const {
    return *((const struct IP_Header_TCP *) (buffer + ip().header_length ()));
  }

  /** Byte offset of the data within the TCP packet.
   */
  inline u16_t tcp_data_offset () const {
    return ip().header_length () + tcp().header_length ();
  }

  /** Length of the data within the TCP packet.
   */
  inline u16_t tcp_data_length () const {
    return ip().payload_length () - tcp().header_length ();
  }

  /** Returns a reference to the UDP header within the buffer.
   */
  inline struct IP_Header_UDP & udp () {
    return *((struct IP_Header_UDP *) (buffer + ip().header_length ()));
  }

  /** Returns a constant reference to the UDP header within the buffer.
   */
  inline const struct IP_Header_UDP & udp () const {
    return *((const struct IP_Header_UDP *) (buffer + ip().header_length ()));
  }

  /** Byte offset of the data within the UDP packet.
   */
  inline u16_t udp_data_offset () const {
    return ip().header_length () + udp().header_length ();
  }

  /** Length of the data within the UDP packet.
   */
  inline u16_t udp_data_length () const {
    return ip().payload_length () - udp().header_length ();
  }

  /** Returns a reference to the ICMP header within the buffer.
   */
  inline struct IP_Header_ICMP & icmp () {
    return *((struct IP_Header_ICMP *) (buffer + ip().header_length ()));
  }

  /** Returns a constant reference to the ICMP header within the buffer.
   */
  inline const struct IP_Header_ICMP & icmp () const {
    return *((const struct IP_Header_ICMP *) (buffer + ip().header_length ()));
  }

  /** Reset the buffer, ready to generate a new packet of the specified protocol.
   * \param p The protocol (TCP, UDP, ICMP) of the new packet.
   */
  inline void defaults (IP_Protocol p) {
    ip().defaults ();
    ip().protocol() = (u8_t) p;

    buffer_used = ip().header_length ();

    switch (p) {
    case p_TCP:
      tcp().defaults ();
      buffer_used += tcp().header_length ();
      break;

    case p_UDP:
      udp().defaults ();
      buffer_used += udp().header_length ();
      break;

    case p_ICMP:
      icmp().defaults ();
      buffer_used += icmp().header_length ();
      break;
    }
  }

  /** Returned by sniff() to indicate the nature of a received packet.
   */
  enum HeaderSniff {
    hs_Okay = 0,                 ///< No errors found with the packet. IP version correct, protocol supported, and checksum valid.
    hs_FrameError,               ///< An internal error - an empty packet.
    hs_EchoRequest,              ///< An Echo Request (ping!) received
    hs_EchoReply,                ///< Response to an Echo Request (i.e., an Echo Reply) received
    hs_IPv4,                     ///< The packet is IPv4, but we only support IPv6
    hs_IPv4_FrameError,          ///< The packet is shorter than the IPv4 header, or the packet's stated header length is longer than the packet
    hs_IPv4_PacketTooShort,      ///< The packet's stated length does not match the packet's actual length
    hs_IPv4_Checksum,            ///< The IPv4 checksum is wrong.
    hs_IPv6,                     ///< The packet is IPv6, but we only support IPv4
    hs_IPv6_FrameError,          ///< The packet is shorter than the IPv6 header
    hs_IPv6_PacketTooShort,      ///< The packet's stated length does not match the packet's actual length
    hs_Protocol_Unsupported,     ///< Protocol is not one of TCP, UDP, ICMP (Echo Request / Reply)
    hs_Protocol_FrameError,      ///< Stated length of TCP header is too short
    hs_Protocol_PacketTooShort,  ///< The packet's stated length does not match the packet's actual length
    hs_Protocol_Checksum         ///< The protocol checksum is wrong.
  };

  /** Examine and validate the buffered packet.
   */
  HeaderSniff sniff () const;

  /** Last step before sending a new TCP packet: set lengths and calculate checksums.
   */
  void tcp_finalise ();

  /** Last step before sending a new UDP packet: set lengths and calculate checksums.
   */
  void udp_finalise ();

private:
  /** Last step before sending a new ICMP packet: set lengths and calculate checksums.
   */
  void icmp_finalise ();

public:
  /** Generate an Echo Request ping packet.
   */
  void ping (const IP_Address & destination, u16_t seq_no);

  /** Convert an incoming Echo Request packet into an Echo Reply packet.
   */
  void ping_to_pong ();

  /** Calculate the round-trip time for a received Echo Reply.
   */
  void pong (u32_t & round_trip, u16_t & seq_no) const;

  /** Print the buffer to the terminal. (Unix only.)
   */
  void print () const;
};

#endif /* ! __ip_buffer_hh__ */
